1. IO redirect:
	Three files for each program open in a shell: 0, Standard in; 1, Standard out; 2, Standard error
	Redirect stdin: some-command < /path/to/some/file
	Redirect stdout: some-command > /path/to/some/file
	Redirect stderr: some-command 2> /path/to/some/file
	<file	means open a file for reading and associate with stdin.
	<<token Means use the current input stream as stdin for the program until token is seen.
	>file	means open a file for writing and truncate it and associate it with stdout
	>>file means open a file for writing and seek to the end and associate it with stdout
	n>&m means redirect FD n to the same places as FD m. Eg, 2>&1 means send send stderr to the same place that stdout is goint to.

2. pipe: output_to_stdoutput_cmd | accept_stdin_input_command  
	Useful command: cut, sort, uniq, grep, less, more, tee, wc, tr, col, join, paste, expand, split, xargs...
	Reference: linux.vbird.org/linux_basic/0320bash.php#pipe

3. if:
   if ...; then
      ... 
   elif ...; then
      ...
   else 
      ...
   fi
	[ -f "somefile" ] : return if somefile is a file
	[ -d "somedir" ] : return if somedir is a directory
	[ -x "/bin/ls" ] : return if /bin/ls exist and executable
	[ -n "$var" ] : return if the variable var set a value
	and -r, -w, -x check if the file readable, writable, executable.
	-s check if the file empty.
	[ "$a" = "$b" ] : return if $a the same with $b
	NOTE: The blankspace after '[' and before ']' is must. And ' ' before after '=' is must.
	Reference: www.cnblogs.com/feisky/archive/2010/03/31/1701560.html

4. && and ||
	condition_expression && do_one_thing, means do one thing when the condition is true or command successful.
	condition_expression || do_one_thing, means do one thing when the condition is false or command fail.
	condition_expression && do_one_thing || do_another_thing, means do one thing if condition true, unless do another thing.


5. $1, the first argument transferred to the script. For example: script 123.txt. $1 is 123.txt
   $*, all the arguments transferred to th escript.
   $?, the Exit Status of command or shell script. 0 indicate successful.
   $#, number of command line arguments.

6. '' and \ can be used to print reserved keyword. "" will unmeaning keywords except \, $ and `.

7. function: 
   define a function: function afun(){echo $1;} 
   call the funciton: afun helloworld

8. get the result of a command: var=`command [option] [param]`
   date=`date +%Y%d%m`; echo $date

9. "#!" at the begining of the script, it indicates the sh environment this script needed.
   #! bin/bash, it indicates to run ~/.bashrc before run the script

10. command1;command2
    It used to run two command in one command line

11. debug shell script: use -v and -x option.
    bash -x script param1 param2 ...
    bash -v script param1 param2 ...

12. send unwanted ouput to /dev/null:
    command > /dev/null

13. execute a command when detect a signal.
    trap {commands} {signal number list}
      trap 'echo "ctrl+c caught"; exit 1" 2
      trap ctrl_c_hanle 2 # ctrl_c_handle is a user defined function
		signal Number		When occurs
		0			shell exit
		1			hangup
		2			interrupt(CTRL+C)
		3			quit
		9			kill(cannot be caught)

14. shift and getopts are commands used to handle script options
    shift n # n is a number indicate how many positions the options move left
    getopts a:b:c opt
      case $opt in
       a) aparam="$OPTARG";;
       b) bparam="$OPTARG";;
       c) cparam="$OPTARG";;
      esac
    

